generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())

  description  String?
  instagram    String?
  youtube      String?
  belt         String?
  followingIds String[]
  followersIds String[]

  location Location?
  posts    Post[]
  comments Comment[]
  likes    Like[]
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id         String   @id @default(cuid()) @map("_id")
  createdAt  DateTime @default(now())
  slug       String   @unique
  title      String
  desc       String
  img        String?
  videoURL   String?
  views      Int      @default(0)
  likesCount Int      @default(0)
  catSlug    String
  userEmail  String

  cat      Category  @relation(fields: [catSlug], references: [slug])
  user     User      @relation(fields: [userEmail], references: [email])
  comments Comment[]
  Like     Like[]
}

model Category {
  id    String @id @default(cuid()) @map("_id")
  slug  String @unique
  title String

  subcategories Subcategory[]
  Posts         Post[]
}

model Subcategory {
  id         String @id @default(cuid()) @map("_id")
  slug       String @unique
  title      String
  categoryId String

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  desc      String
  userEmail String
  postSlug  String

  user User @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  post Post @relation(fields: [postSlug], references: [slug], onDelete: Cascade)
}

model Like {
  id        String   @id @default(cuid()) @map("_id")
  postId    String
  userEmail String
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userEmail], references: [email], onDelete: Cascade)
}

model Location {
  id        String @id @default(cuid()) @map("_id")
  userEmail String @unique

  city        String
  state       String
  uf          String
  mesoregion  String
  microregion String
  region      String

  user User @relation(fields: [userEmail], references: [email], onDelete: Cascade)
}
